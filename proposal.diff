diff --git a/yt_dlp/extractor/common.py b/yt_dlp/extractor/common.py
index ca9077299..4cb1a0c1c 100644
--- a/yt_dlp/extractor/common.py
+++ b/yt_dlp/extractor/common.py
@@ -1798,6 +1798,8 @@ def _search_nuxt_data(self, webpage, video_id, context_name='__NUXT__', *, fatal
 
     def _resolve_nuxt_array(self, array, video_id, *, fatal=True, default=NO_DEFAULT):
         """Resolves Nuxt rich JSON payload arrays"""
+        # Ref: https://github.com/nuxt/nuxt/commit/9e503be0f2a24f4df72a3ccab2db4d3e63511f57
+        #      https://github.com/nuxt/nuxt/pull/19205
         if default is not NO_DEFAULT:
             fatal = False
 
@@ -1807,10 +1809,8 @@ def indirect_reviver(data):
         def json_reviver(data):
             return json.loads(data)
 
-        # Ref: https://github.com/nuxt/nuxt/commit/9e503be0f2a24f4df72a3ccab2db4d3e63511f57
-        #      https://github.com/nuxt/nuxt/pull/19205
         try:
-            return devalue.parse(array, revivers={
+            gen = devalue.parse_iter(array, revivers={
                 'NuxtError': indirect_reviver,
                 'EmptyShallowRef': json_reviver,
                 'EmptyRef': json_reviver,
@@ -1819,14 +1819,24 @@ def json_reviver(data):
                 'Ref': indirect_reviver,
                 'Reactive': indirect_reviver,
             })
-        except (IndexError, TypeError, ValueError) as e:
-            if default is not NO_DEFAULT:
-                return default
-            error_msg = f'Unable to resolve Nuxt JSON data: {e}'
-            if fatal:
+            while True:
+                try:
+                    error_msg = f'Error resolving Nuxt JSON: {gen.send(None)}'
+                    if fatal:
+                        raise ExtractorError(error_msg, video_id=video_id)
+                    self.report_warning(error_msg, video_id=video_id)
+                except StopIteration as error:
+                    return error.value or ({} if default is NO_DEFAULT else default)
+
+        except (IndexError, TypeError, ValueError) as error:
+            # This branch should be considered a bug imo
+            # all errors should be coded devensively?
+            error_msg = f'Unexpected error resolving Nuxt JSON: {error}'
+            if fatal and default is NO_DEFAULT:
                 raise ExtractorError(error_msg, video_id=video_id)
             self.report_warning(error_msg, video_id=video_id)
-            return {}
+            return {} if default is NO_DEFAULT else default
+
 
     def _search_nuxt_json(self, webpage, video_id, *, fatal=True, default=NO_DEFAULT):
         """Parses metadata from Nuxt rich JSON payloads embedded in HTML"""
diff --git a/yt_dlp/utils/jslib/devalue.py b/yt_dlp/utils/jslib/devalue.py
index d7f74add4..a1914ea28 100644
--- a/yt_dlp/utils/jslib/devalue.py
+++ b/yt_dlp/utils/jslib/devalue.py
@@ -62,7 +62,7 @@ def parse_iter(parsed: typing.Any, /, *, revivers: dict[str, collections.abc.Cal
             try:
                 resolved[source] = target[index] = reviver(target[index])
             except Exception as error:
-                yield TypeError(f'Failed to parse {source} as {name!r}: {error}')
+                yield TypeError(f'failed to parse {source} as {name!r}: {error}')
                 resolved[source] = target[index] = None
             continue
 
